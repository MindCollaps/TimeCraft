{{define "title"}}TimeCraft{{end}}
{{define "metaDescription"}}Welcome to TimeCraft{{end}}
{{define "content"}}
    {{template "topdoc"}}
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Timecraft</title>
    <link href="assets/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>

        div#banner {
            background-color: #0288D1;
            height: 100px;
            box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.3);
        }

        #banner-content img {
            height: 45px;
            width: 50px;
        }

        .dropdown-menu a:hover {
            color: #0288D1;
        }
        .timetable {
            width: 90%;
            height: 600px;
            justify-content: center;
            align-items: center;
            text-align: center;
            background-color: white;
            margin: 0 auto;
            margin-top: 20px;
            border-radius: 25px;
        }
        .datetime{
            margin: 0 auto;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .datetimeview{
            border-width: 10px;
            background-color:#DFEBF2 ;
            border-radius: 25px;
            width: 200px;
            height: 30px;
            text-align: center;
            color: #1a1d20;
            font-weight: bold;

        }
        .dateselectleft, .dateselectright {
            border-width: 0 ;
            box-shadow: #1a1d20;
            background-size: 100%;
            height: 21px;
            width: 21px;
            margin-top: 0; /* Remove the top margin */
            background-color: transparent; /* Transparent background */
            align-self: center; /* Vertically center the buttons */
        }
        .dateselectleft {
            background: url("assets/static/dateleft.png") no-repeat;
            margin-right: 10px;
        }
        .dateselectright {
            background: url("assets/static/dateright.png") no-repeat;
            margin-left: 10px;
        }
        .table{
            background-color: #DFEBF2; /* Change the background color to blue */
            color: white; /* Change text color to white for better visibility */
            height: 1000px;
        }
        .calendar{
            background-color: #DFEBF2;
            width: 300px;
            align-self: center;
        }
    </style>
</head>

<body style="background-color:#DFEBF2;">
<div id="banner" class="d-flex align-items-center justify-content-between">
    <div id="banner-content" class="d-flex align-items-center text-white fs-1 ms-3">
        <img src="/assets/static/New Logo White.png" alt="Bild konnte nicht angezeigt werden.">
        <span id="heading" class="ms-3"><b>Timecraft</b></span>
    </div>
    <div id="banner-right" class="d-flex align-items-center me-3">
        <a href="#" class="me-3 text-white text-decoration-none" style="font-weight: normal;">Time Table</a>
        <a href="#" class="me-3 text-white text-decoration-none" style="font-weight: normal;">Favorite List</a>
        <a href="#" class="me-3 text-white text-decoration-none" style="font-weight: bold;">Pick List</a>
        <div class="dropdown">
            <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" id="dropdownUser" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="https://via.placeholder.com/30" alt="user icon" class="rounded-circle me-2">
            </a>
            <ul class="dropdown-menu dropdown-menu-end text-small" aria-labelledby="dropdownUser">
                <li><a class="dropdown-item" href="#">Profile</a></li>
                <li><a class="dropdown-item" href="#">Settings</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#">Sign out</a></li>
            </ul>
        </div>
    </div>

</div>

<div class="timetable">
    <div class="datetime">
        <button class="dateselectleft"></button>
        <div class="datetimeview">29.04.2024 - 04.05.2024</div>
        <button class="dateselectright"></button>
    </div>
    <!--<div class="calendar" >
        <table class="table">

            <thead>

            <tr>
                <th bgcolor="#DFEBF2" scope="col">Time</th>
                <th bgcolor="#DFEBF2" scope="col">Monday</th>
                <th bgcolor="#DFEBF2" scope="col">Tuesday</th>
                <th bgcolor="#DFEBF2" scope="col">Wednesday</th>
                <th bgcolor="#DFEBF2" scope="col">Thursday</th>
                <th bgcolor="#DFEBF2" scope="col">Friday</th>
                <th bgcolor="#DFEBF2" scope="col">Saturday</th>


            </tr>
            </thead>
            <tbody>

            </tbody>
        </table>//-->
    </div>
</div>

<script src="assets/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>


</body>

</html>


    <script>
        var app = Vue.createApp({
            delimiters: ['${', '}'],
            data: () => ({
                weekDayCount: 6,
                currentTimeThickness: 3,
                scalarMin: 8,
                scalarMax: 20,
                days: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
                data: {{.TimeTables}},
                weekString: "",
                times: [],
                selectedTimeTables: [],
                weeks: [],
                selectedWeek: [],
            }),
            mounted() {
                this.calculateTimes();
                this.calculateWeeks();
                this.selectClosestWeek();
            },
            methods: {
                timeLineStyle() {
                    let time = new Date().toLocaleString().split(", ")[1].split(":").slice(0, 2).join(":");
                    console.log(time);
                    return {
                        top: this.timeToPercent(time) + "%",
                        height: this.currentTimeThickness + "px",
                        zIndex: 100,
                        background: "rgba(255, 0, 0, 0.6)"
                    }
                },
                slotColor(slot) {
                    let classes = [
                        "rounded-2",
                        "shadow"
                    ];

                    if (slot.isOnline)
                        classes.push("bg-warning");
                    else if (slot.isCancelled) {
                        //remove shadow
                        classes.pop();
                        classes.push("bg-danger");
                    } else if (slot.isExam)
                        classes.push("bg-success");
                    else if (slot.isReExamination)
                        classes.push("bg-success-subtle");
                    else if (slot.isEvent)
                        classes.push("bg-secondary");
                    else if (slot.wasMoved)
                        classes.push("bg-info")
                    else if (slot.isHoliday)
                        classes.push("bg-body-tertiary")
                    else
                        classes.push("bg-primary");

                    return classes;
                },
                slotStyle(slot) {
                    let style = {
                        top: slot.val,
                        height: slot.valH,
                    }

                    if (slot.isCancelled) {
                        style["box-shadow"] = "inset 0 0 22px rgba(0, 0, 0, 0.8)";
                        style["text-decoration"] = "line-through";
                    }

                    return style;
                },
                nextWeek() {
                    let index = this.selectedWeek.weekNumber;
                    let week = this.weeks.find(week => week.weekNumber === index + 1);
                    if (week !== undefined) {
                        this.selectWeek(week);
                    } else {
                        let weekDate = new Date(this.selectedWeek.date);
                        weekDate.setDate(weekDate.getDate() + 7);
                        week = {
                            weekNumber: this.selectedWeek.weekNumber + 1,
                            days: [],
                            date: weekDate
                        };
                        this.selectWeek(week)
                    }
                },
                previousWeek() {
                    let index = this.selectedWeek.weekNumber;
                    let week = this.weeks.find(week => week.weekNumber === index - 1);

                    if (week !== undefined) {
                        this.selectWeek(week);
                    } else {
                        let weekDate = new Date(this.selectedWeek.date);
                        weekDate.setDate(weekDate.getDate() - 7);
                        week = {
                            weekNumber: this.selectedWeek.weekNumber - 1,
                            days: [],
                            date: weekDate
                        };
                        this.selectWeek(week)
                    }
                },
                getWeekStringByWeek(week) {
                    //week string like 02.01.2021 - 08.01.2021
                    let firstDay = week.date;
                    let lastDay = new Date(firstDay);
                    lastDay.setDate(lastDay.getDate() + 6);
                    return this.formatDate(firstDay) + " - " + this.formatDate(lastDay);
                },
                formatDate(date) {
                    let dd = date.getDate();
                    let mm = date.getMonth() + 1;
                    const yyyy = date.getFullYear();

                    if (dd < 10) dd = '0' + dd;
                    if (mm < 10) mm = '0' + mm;

                    return dd + '.' + mm + '.' + yyyy;
                },
                selectWeek(week) {
                    //Check for enough days in week and add them
                    let currentDay = new Date(week.date);
                    let days = [];
                    for (let i = 0; i < this.weekDayCount; i++) {
                        let day = week.days.find(day => new Date(day.date).getTime() == currentDay.getTime());
                        if (day != undefined) {
                            day.weekDay = this.days[i];
                            days.push(day);
                        } else {
                            days.push({
                                date: currentDay,
                                timeSlotIds: [],
                                weekDay: this.days[i]
                            });
                        }

                        //current day add one day
                        currentDay = new Date(currentDay.getTime() + 86400000);
                    }

                    week.days = days;

                    if (week === undefined)
                        this.weekString = "No lessons in timetable.";
                    else if (week.days.length > 0)
                        this.weekString = this.getWeekStringByWeek(week);
                    else
                        this.weekString = "No lessons in timetable.";

                    this.selectedWeek = week;
                },
                selectClosestWeek() {
                    let date = new Date();
                    let weekNumber = this.getWeekNumber(date);

                    //TODO:: Use date instead of weekNumber
                    let week = this.weeks.find(week => week.weekNumber === weekNumber);

                    if (week === undefined) {
                        this.selectWeek(this.weeks[0])
                    } else {
                        this.selectWeek(week);
                    }
                },
                calculateTimes() {
                    for (let i = 0
                        ; i < this.scalarMax - this.scalarMin; i++) {
                        this.times.push(this.scalarMin + i + ":00");
                    }
                },
                calculateWeeks() {
                    //Calculate the weeks from data.
                    //data has array of timeTables
                    //timeTables have array of days
                    //days have array of timeSlots and a field date
                    let weeks = [];
                    for (let i = 0; i < this.data.length; i++) {
                        let timeTable = this.data[i];
                        for (let j = 0; j < timeTable.days.length; j++) {
                            let day = timeTable.days[j];
                            //convert date, just using the day
                            let date = new Date(day.date);
                            let weekNumber = this.getWeekNumber(date);
                            let week = weeks.find(week => week.weekNumber === weekNumber);
                            if (week === undefined) {
                                week = {
                                    weekNumber: weekNumber,
                                    days: [],
                                    date: date,
                                };
                                weeks.push(week);
                            }
                            week.days.push(day);
                        }

                        //check if all weeks are present, if not, add empty weeks
                        let firstWeek = weeks[0];
                        let lastWeek = weeks[weeks.length - 1];
                        let firstWeekNumber = firstWeek.weekNumber;
                        let lastWeekNumber = lastWeek.weekNumber;
                        //calulate the date of the week
                        let firstWeekDate = new Date(firstWeek.date);
                        for (let j = firstWeekNumber; j < lastWeekNumber; j++) {
                            let week = weeks.find(week => week.weekNumber === j);
                            let weeksDate = new Date(firstWeekDate);
                            weeksDate.setDate(weeksDate.getDate() + (j - firstWeekNumber) * 7);
                            if (week === undefined) {
                                week = {
                                    weekNumber: j,
                                    days: [],
                                    date: weeksDate,
                                };
                                weeks.push(week);
                            }
                        }
                    }
                    this.weeks = weeks;

                    for (let i = 0; i < this.weeks.length; i++) {
                        let week = this.weeks[i];
                        for (let j = 0; j < week.days.length; j++) {
                            let day = week.days[j];
                            let timeSlotIds = [];
                            if (day.timeSlotIds == undefined)
                                day.timeSlotIds = [];
                            let heightCount = 0
                            for (let k = 0; k < day.timeSlotIds.length; k++) {
                                let timeSlot = day.timeSlotIds[k];
                                //make timeStart and timeEnd time only
                                timeSlot.timeStart = timeSlot.timeStart.split(" ")[1];
                                timeSlot.timeEnd = timeSlot.timeEnd.split(" ")[1];
                                let val = this.timeToPercent(timeSlot.timeStart)
                                timeSlot.val = (val - heightCount) + "%";
                                let height = (this.timeToPercent(timeSlot.timeEnd) - val)
                                timeSlot.valH = height + "%"
                                heightCount += height;
                                timeSlotIds.push(timeSlot);
                            }
                            day.timeSlotIds = timeSlotIds;
                        }
                    }
                },
                getWeekNumber(date) {
                    let d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
                    let dayNum = d.getUTCDay() || 7;
                    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
                    let yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
                    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7)
                },
                timeToPercent(time) {
                    let timeArray = time.split(":");
                    let hours = parseInt(timeArray[0]);
                    let minutes = parseInt(timeArray[1]);
                    let scalar = hours - this.scalarMin;
                    let scalarMinutes = minutes / 60;
                    return (scalar + scalarMinutes) / (this.scalarMax - this.scalarMin) * 100;
                },
            }
        }).mount('#app')
    </script>
    {{template "botdoc"}}
{{end}}